//--------------------------------------------------------------------------------------------------
//= SsbAllCharMatch.hsp
//--------------------------------------------------------------------------------------------------
//	モジュールをインクルード
//--------------------------------------------------------------------------------------------------
#module _SsbAllCharMatch_

	//------------------------------------------------------------------------------------------
	//= Exist関数
	//------------------------------------------------------------------------------------------
		#defcfunc ExistB str _path
			ret = 0
			exist _path
			if( strsize != -1 ){ ret = 1 }
		return ret

	//----------------------------------------------------------------------------------------------
	//= 指定したウィンドウID上でpgetする
	//----------------------------------------------------------------------------------------------
		#deffunc GetPixelOnID int _id, int _x, int _y
			GselMem = ginfo_sel
			gsel _id
				pget _x, _y
				r = ginfo_r
				g = ginfo_g
				b = ginfo_b
			gsel GselMem
			color r, g, b
		return

	//----------------------------------------------------------------------------------------------
	//= 全要素を描画
	//----------------------------------------------------------------------------------------------
		#deffunc DrawAllGraphic

			//下描きウィンドウに下描き
			gsel SCR_DRAFT@
				//背景描画
				DrawBackground

				//キャラアイコン描画
				posX = 0, WINDOW_SIZE_W@-CHARACTER_ICON_SIZE_W@*2
				y = WINDOW_SIZE_H@/2-CHARACTER_ICON_SIZE_H@*CHARACTER_NUMBER@/4
				posY = y, y
				repeat 2
					pos posX(cnt), posY(cnt)
					DrawCharacterIcon cnt
				loop

				//参加プレイヤー人数を算出(空白は未参加)
				dim PlayerEntry@, PLAYER_MAX@
				PlayerNumber@ = 0
				for i, 0, PLAYER_MAX@, 1
					if( PlayerName@(i) != "" ){
						PlayerEntry@(i) = TRUE@
						PlayerNumber@++
					}
				next

				//ネームプレート描画
				n = 0
				repeat: i = cnt
					//描画したプレート数が参加人数に達したらループを抜ける
					if( n >= PlayerNumber@ ){
						break
					}
					//参加していないプレイヤーのプレートはスキップ
					if( PlayerEntry@(i) == TRUE@ ){
						//参加人数ごとに場合分け
						switch PlayerNumber@
							//1人
							case 1
								if( n == 0 ):pos WINDOW_SIZE_W@/2-NAME_PLATE_SIZE_MAX_W@/2, 0
								swbreak
							case 2
								if( n == 0 ):pos 0, 0
								if( n == 1 ):pos WINDOW_SIZE_W@-NAME_PLATE_SIZE_MAX_W@, 0
								swbreak
							case 3
								if( n == 0 ):pos 0, 0
								if( n == 1 ):pos WINDOW_SIZE_W@/2-NAME_PLATE_SIZE_MAX_W@/2, 0
								if( n == 2 ):pos WINDOW_SIZE_W@-NAME_PLATE_SIZE_MAX_W@, 0
								swbreak
							case 4
								pos WINDOW_SIZE_W@/4*n, 0
								swbreak
						swend
						DrawNamePlate i
						n++
					}
				loop

				//フリースペース描画
				w = FREESPACE_SIZE_W@
				h = FREESPACE_SIZE_H@
				x = WINDOW_SIZE_W@/2-w/2
				y = WINDOW_SIZE_H@-h
				ddim rect, 4			//alDrawTextPで使用
				UnfilledSpaceW = w		//横幅超えのチェックのために使用する余白の幅

				alCreateImage 0, w+UnfilledSpaceW, h
				alColor 255, 255, 255
				repeat
					FontSize = SYSTEM_FONT_SIZE@-cnt
					if( FontSize <= 0 ){
						FontSize = 1
						break
					}
					alFont SYSTEM_FONT_NAME@, FontSize, SYSTEM_FONT_STYLE@
					alDrawTextP rect, 0, ""+FreeSpaceText@, 0, 0, w+UnfilledSpaceW, h, 1, 1
					if( rect(2) < w ){
						break
					}
				loop
				alDrawText ""+FreeSpaceText@, 0, 0, w+UnfilledSpaceW, h, 1, 1
				alCopyImageToScreen 0, SCR_DRAFT@, x-UnfilledSpaceW/2, y, w+UnfilledSpaceW, h

				//オブジェクトボックス
				w = OBJECT_BOX_SIZE_W@
				h = OBJECT_BOX_SIZE_H@
				x = WINDOW_SIZE_W@/2-w/2
				y = WINDOW_SIZE_H@/2-h/2
				;光源
				syscolor 20:	boxf x-2, y-2, x+w+1, y+h+1
				;影
				syscolor 21:	boxf x, y, x+w+1, y+h+1
				syscolor 16:	boxf x, y, x+w, y+h
				;表面
				syscolor 15:	boxf x, y, x+w-1, y+h-1
				;プレイヤーネーム添字
				if( CompactModeFlag@ == FALSE ){
					baseX = OBJECT_BOX_POS_X@
					baseY = OBJECT_BOX_POS_Y@
					s = 4	//セパレータ
					w = OBJECT_BOX_SIZE_W@/PLAYER_MAX@-s*2
					h = 24
					x = baseX+s*2+w/2-8
					y = baseY+(OBJECT_BOX_SIZE_H@/2)-128/2
					objsize w, h
					color
					font NAME_PLATE_FONT_NAME@, NAME_PLATE_FONT_SIZE@, NAME_PLATE_FONT_STYLE@
					repeat PLAYER_MAX@
						pos x+(w+s)*cnt, y
						mes ""+(cnt+1)+"P"
					loop
				}

			//メインウィンドウにコピー
			gsel SCR_MAIN@
				pos 0, 0
				gmode 0
				gzoom ginfo_winx, ginfo_winy, SCR_DRAFT@, 0, 0, WINDOW_SIZE_W@, WINDOW_SIZE_H@, 1

		return

	//----------------------------------------------------------------------------------------------
	//= 背景描画
	//----------------------------------------------------------------------------------------------
		#deffunc DrawBackground
			gmode 0, BG_SIZE_W@, BG_SIZE_H@
			xMax = WINDOW_SIZE_W@/BG_SIZE_W@+1
			yMax = WINDOW_SIZE_H@/BG_SIZE_H@+1
			for x, 0, xMax
				for y, 0, yMax
					pos x*BG_SIZE_W@, y*BG_SIZE_H@
					gcopy SCR_BG@
				next
			next
			//マウス当たり判定用のバッファ初期化
			GselMem = ginfo_sel
			gsel SCR_MOUSE_COLLISION@
			cls 4
			gsel GselMem
		return

	//----------------------------------------------------------------------------------------------
	//= キャラクターアイコン描画
	//----------------------------------------------------------------------------------------------
		#deffunc DrawCharacterIcon int _p
			x	= ginfo_cx+CHARACTER_ICON_SIZE_W@	//基本座標が左上なのに対し、ルイージが右列であるため
			y	= ginfo_cy
			id	= SCR_CHARACTER_ICON@
			w	= CHARACTER_ICON_SIZE_W@
			h	= CHARACTER_ICON_SIZE_H@
			n	= CHARACTER_NUMBER@
			gmode 0, w, h
			for i, 0, n
				//左列へ移行
				if( i == n/2 ){
					x -= w
					y -= h*(n/2)
				}
				//アイコン描画
				f = CharacterFlag@(_p, i)
				pos x, y
				gcopy id, w*f, h*CharacterSet@(_p, i)
				//選択状態描画
				if( CharacterIconSelectFlag@(_p, i) == TRUE@ ){
					alCreateImage 0, w, h
					alColor 51, 153, 255, 128
					alFillRect 0, 0, w, h
					alCopyImageToScreen 0, ginfo_sel, x, y, w, h
				}
				//マウス当たり判定用バッファへ描画
				GselMem = ginfo_sel
				gsel SCR_MOUSE_COLLISION@
					color 255, _p, i
					boxf x, y, x+w-1, y+h-1
				gsel GselMem
				//改行
				y += h
			next
		return

	//----------------------------------------------------------------------------------------------
	//= キャラクタ―セレクトウィンドウ初期化
	//----------------------------------------------------------------------------------------------
		#deffunc InitCharacterSelectWindow
			w = CHARACTER_ICON_SIZE_W@
			h = CHARACTER_ICON_SIZE_H@

			gmode 0, w, h
			c = 0
			for i, 0, 4, 1
				for j, 0, 3, 1
					x = w*j: y = h*i
					pos x, y
					gcopy SCR_CHARACTER_ICON@, 0, h*c
					c++
				next
			next

			objsize ginfo_sx/2, CHARACTER_SELECT_WINDOW_BUTTON_H@
			pos 0, h*4:				button gosub "なし", *__NonButtonOnCharacterSelectWindow
			pos ginfo_sx/2, h*4:	button gosub "キャンセル", *__CloseCharacterSelectWindow
		return

	//----------------------------------------------------------------------------------------------
	//= キャラクターセレクトウィンドウ > なし ボタン
	//----------------------------------------------------------------------------------------------
		*__NonButtonOnCharacterSelectWindow
			for i, 0, 2, 1
				for j, 0, CHARACTER_NUMBER@, 1
					if( CharacterIconSelectFlag@(i, j) == TRUE@ ){
						CharacterSet@(i, j) = -1
					}
				next
			next
			gosub *__ResetCharacterIconSelectFlag@
			DrawAllGraphic
			gosub *__CloseCharacterSelectWindow
		return

	//----------------------------------------------------------------------------------------------
	//= キャラクターセレクトウィンドウ > キャンセル ボタン
	//----------------------------------------------------------------------------------------------
		*__CloseCharacterSelectWindow
			GselMem = ginfo_sel
			gsel SCR_CHARACTER_SELECT@, -1
			gsel GselMem
		return

	//----------------------------------------------------------------------------------------------
	//= ネームプレートを描画
	//----------------------------------------------------------------------------------------------
		#deffunc DrawNamePlate int _p
			x	= ginfo_cx
			y	= ginfo_cy
			w	= limit(WINDOW_SIZE_W@/PlayerNumber@, NAME_PLATE_SIZE_MIN_W@, NAME_PLATE_SIZE_MAX_W@)
			h	= NAME_PLATE_SIZE_H@
			ddim rect, 4			//alDrawTextPで使用
			UnfilledSpaceW = w		//横幅超えのチェックのために使用する余白の幅

			//ベース描画
			pos x, y
			DrawNamePlateBase w, _p

			alCreateImage 0, w+UnfilledSpaceW, h
			alColor 255, 255, 255
			//描画横幅がネームプレート横幅を超えていないかチェック、
			//超えていればフォントサイズを1ずつ下げ再度チェック
			repeat
				FontSize = NAME_PLATE_FONT_SIZE@-cnt
				if( FontSize <= 0 ){
					FontSize = 1
					break
				}
				alFont NAME_PLATE_FONT_NAME@, FontSize, NAME_PLATE_FONT_STYLE@
				alDrawTextP rect, 0, ""+PlayerName@(_p), 0, 0, w+UnfilledSpaceW, h, 1, 1
				if( rect(2) < w ){
					break
				}
			loop
			//下書きウィンドウに描画
			alDrawText ""+PlayerName@(_p), 0, 0, w+UnfilledSpaceW, h, 1, 1
			alCopyImageToScreen 0, SCR_DRAFT@, x-UnfilledSpaceW/2, y, w+UnfilledSpaceW, h
		return

	//----------------------------------------------------------------------------------------------
	//= ネームプレートベースを描画
	//----------------------------------------------------------------------------------------------
		#deffunc DrawNamePlateBase int _w, int _p
			x = ginfo_cx
			y = ginfo_cy
			w = limit(_w, NAME_PLATE_SIZE_MIN_W@, NAME_PLATE_SIZE_MAX_W@)
			h = NAME_PLATE_SIZE_H@
			p = limit(_p, 0, 3)			//player
			e = 4						//edge

			//left
			gmode 2, e, h
			pos x, y
			gcopy SCR_NAME_PLATE_LEFT@, 0, h*p, e, h

			//right
			pos x+w-e, y
			gcopy SCR_NAME_PLATE_RIGHT@, 0, h*p, e, h

			//fill
			if( w > NAME_PLATE_SIZE_MIN_W@ ){
				pos x+e, y
				gzoom w-e*2, h, SCR_NAME_PLATE_FILL@, 0, h*p, 1, h
			}
			
		return

#global