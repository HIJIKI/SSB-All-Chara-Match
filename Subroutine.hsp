//--------------------------------------------------------------------------------------------------
//= subroutine.hsp
//--------------------------------------------------------------------------------------------------
//	各種サブルーチン
//--------------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------
	//= ×ボタンが押された時
	//----------------------------------------------------------------------------------------------
		*__OnExit
			//メインウィンドウ
			if( wparam == SCR_MAIN ){
				gosub *__CheckExit
			}
			//キャラクターセレクトウィンドウ
			if( wparam == SCR_CHARACTER_SELECT ){
				GselMem = ginfo_sel
				gsel wparam, -1
				gsel GselMem
			}
		return

	//----------------------------------------------------------------------------------------------
	//= 終了確認
	//----------------------------------------------------------------------------------------------
		*__CheckExit
			//多重表示防止
			if( ExitCheckDialog == FALSE ){
				ExitCheckDialog = TRUE
				dialog "終了しますか？", 2, ""+PROGRAM_NAME+" "+PROGRAM_VERSION
				if(stat == 6){
					gosub *__DataSave
					end
				}
				ExitCheckDialog = FALSE
			}
		return

	//----------------------------------------------------------------------------------------------
	//= データセーブ
	//----------------------------------------------------------------------------------------------
		*__DataSave
			INIInit ""+IniFileDirectory+"\\"+INI_FILE_NAME
			//General
			sec = "General"
			INISet sec, "AlwaysOnTop", ""+AlwaysOnTopFlag
			INISet sec, "CompactMode", ""+CompactModeFlag
			//Window
			gsel SCR_MAIN	//念のためメインウィンドウを選択
			sec = "Window"
			INISet sec, "PositionX", ""+ginfo_wx1
			INISet sec, "PositionY", ""+ginfo_wy1
			//PlayerName
			sec = "PlayerName"
			repeat PLAYER_MAX
				INISet sec, "FlagPlayer"+(cnt+1), ""+PlayerNameSaveFlag(cnt)
				INISet sec, "NamePlayer"+(cnt+1), ""+PlayerName(cnt)
			loop
		return

	//----------------------------------------------------------------------------------------------
	//= データロード
	//----------------------------------------------------------------------------------------------
		*__DataLoad
			INIInit ""+IniFileDirectory+"\\"+INI_FILE_NAME
			//General
			sec = "General"
			if( INIGet(sec, "AlwaysOnTop") )	{ AlwaysOnTopFlag = int(refstr) }		else { AlwaysOnTopFlag = FALSE }
			if( INIGet(sec, "CompactMode") )	{ CompactModeFlag = int(refstr) }		else { CompactModeFlag = FALSE }
			//Window
			sec = "Window"
			if( INIGet(sec, "PositionX") )		{ WindowPositionX = int(refstr) }		else { WindowPositionX = 0 }
			if( INIGet(sec, "PositionY") )		{ WindowPositionY = int(refstr) }		else { WindowPositionY = 0 }
			//PlayerName
			sec = "PlayerName"
			repeat PLAYER_MAX
				if( INIGet(sec, "FlagPlayer"+(cnt+1)) )	{ PlayerNameSaveFlag(cnt) = int(refstr) } else { PlayerNameSaveFlag(cnt) = 0 }
				if( PlayerNameSaveFlag(cnt) == TRUE ){
					if( INIGet(sec, "NamePlayer"+(cnt+1)) )	{ PlayerName(cnt) = refstr } else { PlayerName(cnt) = "" }
				}
			loop
		return

	//----------------------------------------------------------------------------------------------
	//= 画面がクリックされた時
	//----------------------------------------------------------------------------------------------
		*__OnClick
			stick Key, 64+256+512
			//メインウィンドウ
			if( ginfo_act == SCR_MAIN ){
				ClickX = mousex
				ClickY = mousey
				//コンパクトモードの場合の座標変換
				if( CompactModeFlag == TRUE ){
					tmpX = double(mousex)/double(COMPACTMODE_SIZE_W)*double(WINDOW_SIZE_W)
					tmpY = double(mousey)/double(COMPACTMODE_SIZE_H)*double(WINDOW_SIZE_H)
					ClickX = int(tmpX)
					ClickY = int(tmpY)
				}
				//左クリック
				if( Key & 256 ){
					if( ClickX < WINDOW_SIZE_W )&&( ClickY < WINDOW_SIZE_H ){
						GetPixelOnID SCR_MOUSE_COLLISION, ClickX, ClickY
						result = ginfo_r
						if( result == 255 ){
							player = ginfo_g
							id = ginfo_b
							if( Key & 64 ){
								//キャラアイコン選択を切り替え
								CharacterIconSelectFlag(player, id) ^= 1
							} else {
								//キャラ生存状態を切り替え
								gosub *__ResetCharacterIconSelectFlag
								CharacterFlag(player, id) ^= 1
							}
							//再描画
							DrawAllGraphic
						}
					}
				}
				//右クリック
				if( Key & 512 ){
					if( ClickX < WINDOW_SIZE_W )&&( ClickY < WINDOW_SIZE_H ){
						GetPixelOnID SCR_MOUSE_COLLISION, ClickX, ClickY
						result = ginfo_r
						//キャラ変更ウィンドウを表示
						if( result == 255 ){
							player = ginfo_g
							id = ginfo_b
							GselMem = ginfo_sel
							if( CharacterIconSelectFlag(player, id) == FALSE ){
								gosub *__ResetCharacterIconSelectFlag
								CharacterIconSelectFlag(player, id) = TRUE
								DrawAllGraphic
							}
							gsel SCR_CHARACTER_SELECT, 2
							//画面内におさまるように調整
							x = ginfo_mx
							y = ginfo_my
							w = ginfo_sizex
							h = ginfo_sizey
							if( x+w > ginfo_dispx ){
								x -= x+w-ginfo_dispx
							}
							if( y+h > ginfo_dispy ){
								y -= y+h-ginfo_dispy
							}
							width , , x, y
							gsel GselMem
						}
					}
				}
			}
			//キャラクターセレクトウィンドウ
			if( ginfo_act == SCR_CHARACTER_SELECT ){
				//左クリック
				if( Key & 256 ){
					GselMem = ginfo_sel
					gsel SCR_CHARACTER_SELECT
					//有効範囲内であるか
					if( mousex < CHARACTER_ICON_SIZE_W*3 )&&( mousey < CHARACTER_ICON_SIZE_H*4 ){
						//マウス座標から選択キャラを算出
						x = mousex/CHARACTER_ICON_SIZE_W: y = (mousey/CHARACTER_ICON_SIZE_H)*3
						chara = x+y
						//キャラ変更を反映
						for i, 0, 2, 1
							for j, 0, CHARACTER_NUMBER, 1
								if( CharacterIconSelectFlag(i, j) == TRUE ){
									CharacterSet(i, j) = chara
								}
							next
						next
						//後処理
						gosub *__ResetCharacterIconSelectFlag
						gsel SCR_CHARACTER_SELECT, -1
						gsel GselMem
						DrawAllGraphic
					}
				}
			}
		return

	//----------------------------------------------------------------------------------------------
	//= キャラクターアイコン選択状況をリセット
	//----------------------------------------------------------------------------------------------
		*__ResetCharacterIconSelectFlag
			for i, 0, 2, 1
				for j, 0, CHARACTER_NUMBER, 1
					CharacterIconSelectFlag(i, j) = FALSE
				next
			next
		return

	//----------------------------------------------------------------------------------------------
	//= オブジェクト初期化
	//----------------------------------------------------------------------------------------------
		*__ObjectInit
			//オブジェクトを全削除
			clrobj

			//オブジェクトボックスの位置、サイズを設定
			e = 8	//エッジ(padding)
			s = 4	//セパレータ
			;コンパクトモードを場合分け
			if( CompactModeFlag == TRUE ){
				e = 4
				s = 2
				baseX = OBJECT_BOX_POS_X/COMPACTMODE_RATE+e
				baseY = OBJECT_BOX_POS_Y/COMPACTMODE_RATE+e
				baseW = OBJECT_BOX_SIZE_W/COMPACTMODE_RATE-e*2
				baseH = OBJECT_BOX_SIZE_H/COMPACTMODE_RATE-e*2
			} else {
				baseX = OBJECT_BOX_POS_X+e
				baseY = OBJECT_BOX_POS_Y+e
				baseW = OBJECT_BOX_SIZE_W-e*2
				baseH = OBJECT_BOX_SIZE_H-e*2
			}

			//プレイヤーネーム入力欄
			w = (baseW-s*(PLAYER_MAX-1))/PLAYER_MAX
			h = 24
			x = baseX
			y = baseY+(baseH/2)-(h*3/2)-(e*2/2)		//全オブジェクトの高さで中央寄せ
			objsize w, h
			repeat PLAYER_MAX
				pos x+(w+s)*cnt, y
				input PlayerName(cnt)
				PlayerNameInputObjectID(cnt) = stat
				PlayerNameInputObjectHandle(cnt) = objinfo(stat, 2)
			loop

			//キャラランダム
			;input
			x = baseX
			y = ginfo_cy+e
			w = (baseW-s*2)/10*2
			h = 24
			pos x, y
			objsize w, h
			CharacterRandomNumber = CHARACTER_NUMBER
			input CharacterRandomNumber
			CharacterRandomNumberInputObjectID = stat
			CharacterRandomNumberInputObjectHandle = objinfo(stat, 2)
			winobj "msctls_updown32", "", , $50000012 | UDS_ALIGNRIGHT
			hUpdown = objinfo(stat, 2)
			sendmsg hUpdown, $465, , MAKELONG(12, 1)	;最小/最大値指定
			;button
			x = ginfo_cx+w+s
			y = y
			w = (baseW-s*2)/10*4
			h = 24
			pos x, y
			objsize w, h
			button gosub "キャラランダム", *__CharacterRandomSelect
			;chkbox
			x = ginfo_cx+w+s
			y = y
			w = (baseW-s*2)/10*4
			h = 24
			pos x, y
			objsize w, h
			chkbox "キャラかぶりなし", NotSameCharacterFlag
			NotSameCharacterCheckboxObjectID = stat
			;OnCommandイベントが起きてしまうため、後回しにしている
			objprm CharacterRandomNumberInputObjectID, CHARACTER_NUMBER

			//自由欄入力ボックス
			w = baseW
			h = 24
			x = baseX
			y = ginfo_cy+e
			pos x, y
			objsize w, h
			input FreeSpaceText, , , 128
			FreeSpaceTextInputObjectID(cnt) = stat
			FreeSpaceTextInputObjectHandle(cnt) = objinfo(stat, 2)
		return

	//----------------------------------------------------------------------------------------------
	//= キャラランダム
	//----------------------------------------------------------------------------------------------
		*__CharacterRandomSelect
			gosub *__ResetCharacterIconSelectFlag
			//キャラセットが編集されている場合正常に動作しない旨を表示
			flag = FALSE
			for i, 0, 2, 1
				for j, 0, CHARACTER_NUMBER, 1
					if( CharacterSet(i, j) != j ){
						flag = TRUE
					}
				next
			next
			if( flag == TRUE )&&( CharacterRandomCautionFlag == FALSE ){
				dialog "キャラクターランダム機能は\nユーザーにより変更されたキャラセットを考慮していません。\nこのまま処理を続けますか？", 3, "キャラクターセットが変更されています"
				if( stat = 7 ){
					return
				}
				CharacterRandomCautionFlag = TRUE
			}
			//不正な数値の場合はリストア
			CharacterRandomNumber = limit(CharacterRandomNumber, 1, CHARACTER_NUMBER)
			objprm CharacterRandomNumberInputObjectID, CharacterRandomNumber
			//ランダム開始
			if CharacterRandomNumber == CHARACTER_NUMBER {
				dim CharacterFlag, 2, CHARACTER_NUMBER
			} else {
				//リセット
				for i, 0, 2
					for j, 0, CHARACTER_NUMBER
						CharacterFlag(i, j) = TRUE
					next
				next
				//1pランダム
				i = 0
				repeat
					tmp = rnd(CHARACTER_NUMBER)
					if( CharacterFlag(0, tmp) == TRUE ){
						CharacterFlag(0, tmp) == FALSE
						i++
					}
					if( i == CharacterRandomNumber ){
						break
					}
				loop
				//2pランダム
				i = 0
				repeat
					tmp = rnd(CHARACTER_NUMBER)
					f = FALSE
					if( CharacterFlag(1, tmp) == TRUE ){
						//キャラかぶりなしかどうか
						if( CharacterRandomNumber <= 6 )&&( NotSameCharacterFlag == TRUE ){
							if( CharacterFlag(0, tmp) == TRUE ){
								f = TRUE
							}
						} else {
							f = TRUE
						}
					}
					if( f == TRUE ){
						CharacterFlag(1, tmp) == FALSE
						i++
					}
					if( i == CharacterRandomNumber ){
						break
					}
				loop
			}
			//再描画
			DrawAllGraphic
		return

	//----------------------------------------------------------------------------------------------
	//= クリップボードにコピー
	//----------------------------------------------------------------------------------------------
		*__CopyCharaFlag
			//データ整形
			put = ""
			p = 1
			for i, 0, 2
				if( GameModeFlag == 0 ){
					put += "【"+p+"P】"
					p++
				} else {
					put += "【"+p+"P&"+(p+1)+"P】"
					p += 2
				}
				for j, 0, CHARACTER_NUMBER
					if( CharacterSet(i, j) != -1 ){
						if( CharacterFlag(i, j) == FALSE ){
							put += " "+CharacterName(CharacterSet(i, j))
						}
					}
				next
				if( i == 0 ){ put += "\n" }
			next
			//テキスト描画(ドラフトウィンドウ)
			GselMem = ginfo_sel
			gsel SCR_DRAFT
				color 255,255,255
				pos WINDOW_SIZE_W/2, OBJECT_BOX_POS_Y+OBJECT_BOX_SIZE_H+12
				font SYSTEM_FONT_NAME, SYSTEM_FONT_SIZE, SYSTEM_FONT_STYLE
				mes "コピーしました。"
			//メインウィンドウにコピー
			gsel SCR_MAIN
				pos 0, 0
				gmode 0
				gzoom ginfo_winx, ginfo_winy, SCR_DRAFT, 0, 0, WINDOW_SIZE_W, WINDOW_SIZE_H, 1
			gsel GselMem
			//クリップボードにセット
			clipset ""+put
		return


	//----------------------------------------------------------------------------------------------
	//= メニューバーを作成
	//----------------------------------------------------------------------------------------------
		*__CreateMenubar
			//ハンドル配列添字用
			i=0:	file = i
			i++:	view = i:	i++:	namesave = i
			i++:	help = i
		
			//[ファイル]内項目
			newmenu SubmenuHandle(file), 1
			addmenu SubmenuHandle(file), "キャラセットを初期化(&D)", MENU_INITCHARASET
			addmenu SubmenuHandle(file), "キャラセットを開く(&O)...", MENU_OPENCHARASET
			addmenu SubmenuHandle(file), "キャラセットを保存(&S)...", MENU_SAVECHARASET
			addmenu SubmenuHandle(file), "", 0, $800
			addmenu SubmenuHandle(file), "キャラ生存状態を初期化(&R)", MENU_INITCHARAFLAG
			addmenu SubmenuHandle(file), "クリップボードにコピー(&C)", MENU_COPYCHARAFLAG
			addmenu SubmenuHandle(file), "", 0, $800
			addmenu SubmenuHandle(file), "終了(&X)", MENU_EXIT

			//[表示]>プレイヤー名を記憶
			newmenu SubmenuHandle(namesave), 1
			if( PlayerNameSaveFlag(0) == TRUE ){
				addmenu SubmenuHandle(namesave), "1P", MENU_NAMESAVE_P1, 0x8
			} else {
				addmenu SubmenuHandle(namesave), "1P", MENU_NAMESAVE_P1
			}
			if( PlayerNameSaveFlag(1) == TRUE ){
				addmenu SubmenuHandle(namesave), "2P", MENU_NAMESAVE_P2, 0x8
			} else {
				addmenu SubmenuHandle(namesave), "2P", MENU_NAMESAVE_P2
			}
			if( PlayerNameSaveFlag(2) == TRUE ){
				addmenu SubmenuHandle(namesave), "3P", MENU_NAMESAVE_P3, 0x8
			} else {
				addmenu SubmenuHandle(namesave), "3P", MENU_NAMESAVE_P3
			}
			if( PlayerNameSaveFlag(3) == TRUE ){
				addmenu SubmenuHandle(namesave), "4P", MENU_NAMESAVE_P4, 0x8
			} else {
				addmenu SubmenuHandle(namesave), "4P", MENU_NAMESAVE_P4
			}

			//[表示]内項目
			newmenu SubmenuHandle(view), 1
			;常に最前面に表示
			if( AlwaysOnTopFlag == TRUE ){
				addmenu SubmenuHandle(view), "常に最前面に表示", MENU_ALWAYSONTOP, 0x8
			} else {
				addmenu SubmenuHandle(view), "常に最前面に表示", MENU_ALWAYSONTOP
			}
			;コンパクトモード切り替え
			if( CompactModeFlag == TRUE ){
				addmenu SubmenuHandle(view), "コンパクトモード", MENU_COMPACTMODE, 0x8
			} else {
				addmenu SubmenuHandle(view), "コンパクトモード", MENU_COMPACTMODE
			}
			;プレイヤー名を記憶
			addmenu SubmenuHandle(view), "プレイヤー名を記憶", SubmenuHandle(namesave), $010

			//[ヘルプ]内項目
			newmenu SubmenuHandle(help), 1
			addmenu SubmenuHandle(help), "バージョン情報...", MENU_ABOUT

			//メニューバー
			newmenu MenubarHandle, 0
			addmenu MenubarHandle, "ファイル(&F)",	SubmenuHandle(file),	$10
			addmenu MenubarHandle, "表示(&V)",		SubmenuHandle(view),	$10
			addmenu MenubarHandle, "ヘルプ(&H)",	SubmenuHandle(help),	$10

			//メニューバーをウィンドウに反映
			applymenu MenubarHandle
		return

	//----------------------------------------------------------------------------------------------
	//= メインウィンドウのメニューアイテムを選択した時
	//----------------------------------------------------------------------------------------------
		*__WM_COMMAND
			//メニューバーが操作された
			if( lparam == 0 ){
				id = LOWORD(wparam)
				//キャラセットを初期化
				if( id == MENU_INITCHARASET ){
					gosub *__ResetCharacterIconSelectFlag
					gosub *__InitCharacterSet
					DrawAllGraphic					//再描画
				}
				//キャラセットを開く
				if( id == MENU_OPENCHARASET ){
					gosub *__ResetCharacterIconSelectFlag
					gosub *__OpenCharacterSet
					DrawAllGraphic					//再描画
				}
				//キャラセットを保存
				if( id == MENU_SAVECHARASET ){
					gosub *__ResetCharacterIconSelectFlag
					gosub *__SaveCharacterSet
				}
				//キャラ生存状態を初期化
				if( id == MENU_INITCHARAFLAG ){
					gosub *__ResetCharacterIconSelectFlag
					gosub *__InitCharacterFlag
					DrawAllGraphic					//再描画
				}
				//クリップボードにコピー
				if( id == MENU_COPYCHARAFLAG ){
					gosub *__CopyCharaFlag
				}
				//終了
				if( id == MENU_EXIT ){
					gosub *__CheckExit
				}
				//常に最前面に表示
				if( id == MENU_ALWAYSONTOP ){
					gosub *__ToggleAlwaysOnTop
					gosub *__CreateMenubar			//チェックマーク更新のため
				}
				//コンパクトモード切り替え
				if( id == MENU_COMPACTMODE ){
					gosub *__ToggleCompactMode
					gosub *__CreateMenubar			//チェックマーク更新のため
					DrawAllGraphic					//再描画
				}
				//バージョン情報
				if( id == MENU_ABOUT ){
					gosub *__Version
				}
				//プレイヤー名を記憶:1P
				if( id == MENU_NAMESAVE_P1 ){
					PlayerNameSaveFlag(0) ^= 1
					gosub *__CreateMenubar			//チェックマーク更新のため
				}
				//プレイヤー名を記憶:2P
				if( id == MENU_NAMESAVE_P2 ){
					PlayerNameSaveFlag(1) ^= 1
					gosub *__CreateMenubar			//チェックマーク更新のため
				}
				//プレイヤー名を記憶:3P
				if( id == MENU_NAMESAVE_P3 ){
					PlayerNameSaveFlag(2) ^= 1
					gosub *__CreateMenubar			//チェックマーク更新のため
				}
				//プレイヤー名を記憶:4P
				if( id == MENU_NAMESAVE_P4 ){
					PlayerNameSaveFlag(3) ^= 1
					gosub *__CreateMenubar			//チェックマーク更新のため
				}
				return
			}

			//名前が変更された
			dupptr hnd, varptr(PlayerNameInputObjectHandle), 4*4, 4
			if( lparam == hnd(0) )||( lparam == hnd(1) )||( lparam == hnd(2) )||( lparam == hnd(3) ){
				if( HIWORD(wParam) == EN_CHANGE ){
					DrawAllGraphic
				}
				return
			}

			//自由欄が変更された
			if( lparam == FreeSpaceTextInputObjectHandle ){
				if( HIWORD(wParam) == EN_CHANGE ){
					DrawAllGraphic
				}
				return
			}

			//ランダムキャラ数が変更された
			if( lparam == CharacterRandomNumberInputObjectHandle ){
				if( HIWORD(wParam) == EN_CHANGE ){
					if( CharacterRandomNumber > 6 ){
						objenable NotSameCharacterCheckboxObjectID, 0
					} else {
						objenable NotSameCharacterCheckboxObjectID, 1
					}
				}
				return
			}

		return

	//----------------------------------------------------------------------------------------------
	//= キャラクターセレクトウィンドウのアクティブ状態が切り替わった時
	//----------------------------------------------------------------------------------------------
		*__WM_ACTIVATE
			//アクティブでなくなった場合非表示に
			f = LOWORD(wParam)
			if(f == FALSE){
				gsel SCR_CHARACTER_SELECT, -1
				gsel SCR_MAIN
			}
		return

	//----------------------------------------------------------------------------------------------
	//= キャラセットを初期化
	//----------------------------------------------------------------------------------------------
		*__InitCharacterSet
			for i, 0, 2, 1
				for j, 0, CHARACTER_NUMBER, 1
					CharacterSet(i, j) = j
				next
			next
		return

	//----------------------------------------------------------------------------------------------
	//= キャラセットを開く
	//----------------------------------------------------------------------------------------------
		*__OpenCharacterSet
			dialog "sacmset", 16, "キャラセットファイル"
			if( stat == 1 ){
				bload ""+refstr, CharacterSet
			}
		return

	//----------------------------------------------------------------------------------------------
	//= キャラセットを保存
	//----------------------------------------------------------------------------------------------
		*__SaveCharacterSet
			dialog "sacmset", 17, "キャラセットファイル"
			filename = getpath(refstr, 1)
			if( stat == 1 ){
				bsave ""+filename+".sacmset", CharacterSet
			}
		return

	//----------------------------------------------------------------------------------------------
	//= キャラ生存状態を初期化
	//----------------------------------------------------------------------------------------------
		*__InitCharacterFlag
			for i, 0, 2, 1
				for j, 0, CHARACTER_NUMBER, 1
					CharacterFlag(i, j) = FALSE
				next
			next
		return

	//----------------------------------------------------------------------------------------------
	//= コンパクトモード切り替え
	//----------------------------------------------------------------------------------------------
		*__ToggleCompactMode
			CompactModeFlag ^= 1
			if( CompactModeFlag == TRUE ){
				width COMPACTMODE_SIZE_W, COMPACTMODE_SIZE_H+GetMenubarHeight()
			} else {
				width WINDOW_SIZE_W, WINDOW_SIZE_H+GetMenubarHeight()
			}
			gosub *__ObjectInit
		return

	//----------------------------------------------------------------------------------------------
	//= 常に最前面に表示切り替え
	//----------------------------------------------------------------------------------------------
		*__ToggleAlwaysOnTop
			AlwaysOnTopFlag ^= 1
			if( AlwaysOnTopFlag == TRUE ){
				gsel SCR_MAIN, 2
			} else {
				gsel SCR_MAIN, 1
			}
		return

	//----------------------------------------------------------------------------------------------
	//= バージョン情報
	//----------------------------------------------------------------------------------------------
		*__Version
			dialog ""+PROGRAM_NAME+"\nVersion "+PROGRAM_VERSION+"\n\n(C)2012 HIJIKI, HIJIKI SOFT"+"\n\nBuild "+__date__+" "+__time__, , ""+PROGRAM_NAME+" について"
		return